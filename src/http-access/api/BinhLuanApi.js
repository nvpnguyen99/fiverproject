/*
 * Fiverr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";

/**
* BinhLuan service.
* @module api/BinhLuanApi
* @version v1
*/
export class BinhLuanApi {

    /**
    * Constructs a new BinhLuanApi. 
    * @alias module:api/BinhLuanApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {Number} id 
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    callDeleteWithHttpInfo(id, tokenCybersoft, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling callDelete");
      }

      // verify the required parameter 'tokenCybersoft' is set
      if (tokenCybersoft === undefined || tokenCybersoft === null) {
        throw new Error("Missing the required parameter 'tokenCybersoft' when calling callDelete");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token'],
        'tokenCybersoft': tokenCybersoft
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/binh-luan/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id 
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    callDelete(id, tokenCybersoft, opts) {
      return this.callDeleteWithHttpInfo(id, tokenCybersoft, opts)
        .then(function(response_and_data) {
          return response_and_data.response.body;
        });
    }


    /**
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getWithHttpInfo(tokenCybersoft) {
      let postBody = null;

      // verify the required parameter 'tokenCybersoft' is set
      if (tokenCybersoft === undefined || tokenCybersoft === null) {
        throw new Error("Missing the required parameter 'tokenCybersoft' when calling get");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'tokenCybersoft': tokenCybersoft
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/binh-luan', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    get(tokenCybersoft) {
      return this.getWithHttpInfo(tokenCybersoft)
        .then(function(response_and_data) {
          return response_and_data.response.body;
        });
    }


    /**
     * @param {String} maCongViec 
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getBinhLuanTheoCongViecWithHttpInfo(maCongViec, tokenCybersoft) {
      let postBody = null;

      // verify the required parameter 'maCongViec' is set
      if (maCongViec === undefined || maCongViec === null) {
        throw new Error("Missing the required parameter 'maCongViec' when calling getBinhLuanTheoCongViec");
      }

      // verify the required parameter 'tokenCybersoft' is set
      if (tokenCybersoft === undefined || tokenCybersoft === null) {
        throw new Error("Missing the required parameter 'tokenCybersoft' when calling getBinhLuanTheoCongViec");
      }


      let pathParams = {
        'MaCongViec': maCongViec
      };
      let queryParams = {
      };
      let headerParams = {
        'tokenCybersoft': tokenCybersoft
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/binh-luan/lay-binh-luan-theo-cong-viec/{MaCongViec}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} maCongViec 
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getBinhLuanTheoCongViec(maCongViec, tokenCybersoft) {
      return this.getBinhLuanTheoCongViecWithHttpInfo(maCongViec, tokenCybersoft)
        .then(function(response_and_data) {
          return response_and_data.response.body;
        });
    }


    /**
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:model/BinhLuanViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    postWithHttpInfo(tokenCybersoft, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'tokenCybersoft' is set
      if (tokenCybersoft === undefined || tokenCybersoft === null) {
        throw new Error("Missing the required parameter 'tokenCybersoft' when calling post");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token'],
        'tokenCybersoft': tokenCybersoft
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/binh-luan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:model/BinhLuanViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    post(tokenCybersoft, opts) {
      return this.postWithHttpInfo(tokenCybersoft, opts)
        .then(function(response_and_data) {
          return response_and_data.response.body;
        });
    }


    /**
     * @param {Number} id 
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:model/BinhLuanViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    putWithHttpInfo(id, tokenCybersoft, opts) {
      opts = opts || {};
      let postBody = opts['model'];

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling put");
      }

      // verify the required parameter 'tokenCybersoft' is set
      if (tokenCybersoft === undefined || tokenCybersoft === null) {
        throw new Error("Missing the required parameter 'tokenCybersoft' when calling put");
      }


      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
        'token': opts['token'],
        'tokenCybersoft': tokenCybersoft
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json'];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/binh-luan/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {Number} id 
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @param {Object} opts Optional parameters
     * @param {String} opts.token 
     * @param {module:model/BinhLuanViewModel} opts.model 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    put(id, tokenCybersoft, opts) {
      return this.putWithHttpInfo(id, tokenCybersoft, opts)
        .then(function(response_and_data) {
          return response_and_data.response.body;
        });
    }


}
