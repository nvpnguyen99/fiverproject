/*
 * Fiverr
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.30
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";

/**
* Skill service.
* @module api/SkillApi
* @version v1
*/
export class SkillApi {

    /**
    * Constructs a new SkillApi. 
    * @alias module:api/SkillApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getWithHttpInfo(tokenCybersoft) {
      let postBody = null;

      // verify the required parameter 'tokenCybersoft' is set
      if (tokenCybersoft === undefined || tokenCybersoft === null) {
        throw new Error("Missing the required parameter 'tokenCybersoft' when calling get");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'tokenCybersoft': tokenCybersoft
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;

      return this.apiClient.callApi(
        '/api/skill', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} tokenCybersoft Nhập token cybersoft
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    get(tokenCybersoft) {
      return this.getWithHttpInfo(tokenCybersoft)
        .then(function(response_and_data) {
          return response_and_data.response.body;
        });
    }


}
